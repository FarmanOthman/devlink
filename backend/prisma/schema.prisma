generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  RECRUITER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  INTERVIEW_SCHEDULED
  HIRED
  REJECTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(DEVELOPER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  jobs      Job[]
  applications Application[]
  documents Document[]
  skills    UserSkill[]
  notifications Notification[]
  logs      AuditLog[]

  @@index([createdAt])
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  users  User[]
  jobs   Job[]

  @@index([createdAt])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  type        JobType  @default(FULL_TIME)
  companyId   String
  userId      String   // Added this field to establish a relation with User
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relations
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Added this relation
  applications Application[]
  categories   JobCategory[]
  skills       JobSkill[]

  @@index([companyId])
  @@index([type])
  @@index([createdAt])
}

model Application {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  resumeUrl String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Skill {
  id    String  @id @default(cuid())
  name  String  @unique

  // Relations
  userSkills UserSkill[]
  jobSkills  JobSkill[]
}

model UserSkill {
  id       String     @id @default(cuid())
  userId   String
  skillId  String
  level    SkillLevel @default(BEGINNER)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model JobSkill {
  id      String     @id @default(cuid())
  jobId   String
  skillId String
  level   SkillLevel @default(BEGINNER)

  // Relations
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([jobId, skillId])
}

model JobCategory {
  id     String @id @default(cuid())
  jobId  String
  name   String

  // Relations
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, name])
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileType  String
  filePath  String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isRead])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}