generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(DEVELOPER)
  tokenVersion  Int            @default(0)
  lastActive    DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  companyId     String?
  applications  Application[]
  logs          AuditLog[]
  documents     Document[]
  jobs          Job[]
  notifications Notification[]
  company       Company?       @relation(fields: [companyId], references: [id])
  skills        UserSkill[]

  @@index([createdAt])
}

model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  jobs      Job[]
  users     User[]

  @@index([createdAt])
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  location     String
  type         JobType       @default(FULL_TIME)
  companyId    String
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  applications Application[]
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories   JobCategory[]
  skills       JobSkill[]

  @@index([companyId])
  @@index([type])
  @@index([createdAt])
}

model Application {
  id        String            @id @default(cuid())
  userId    String
  jobId     String
  resumeUrl String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Skill {
  id         String      @id @default(cuid())
  name       String      @unique
  jobSkills  JobSkill[]
  userSkills UserSkill[]
}

model UserSkill {
  id      String     @id @default(cuid())
  userId  String
  skillId String
  level   SkillLevel @default(BEGINNER)
  skill   Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model JobSkill {
  id      String     @id @default(cuid())
  jobId   String
  skillId String
  level   SkillLevel @default(BEGINNER)
  job     Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill   Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([jobId, skillId])
}

model JobCategory {
  id    String @id @default(cuid())
  jobId String
  name  String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, name])
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileType  String
  filePath  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isRead])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

enum Role {
  DEVELOPER
  RECRUITER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  INTERVIEW_SCHEDULED
  HIRED
  REJECTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
}
